syntax = "proto3";

package witnet;

message Message {
    message Command {
        oneof kind {
            Version Version = 1;
            Verack Verack = 2;
            GetPeers GetPeers = 3;
            Peers Peers = 4;
            Block Block = 5;
            InventoryAnnouncement InventoryAnnouncement = 6;
            InventoryRequest InventoryRequest = 7;
            LastBeacon LastBeacon = 8;
            Transaction Transaction = 9;
        }
    }

    // uint32 is not a fixed-size 32 bit integer: it uses variable length encoding
    uint32 magic = 1;
    Command kind = 2;
}

message Version {
    uint32 version = 1;
    int64 timestamp = 2;
    fixed64 capabilities = 3;
    Address sender_address = 4;
    Address receiver_address = 5;
    string user_agent = 6;
    fixed32 last_epoch = 7;
    fixed64 nonce = 8;
}

message Verack {
    // Intentionally empty
}

message GetPeers {
    // Intentionally empty
}

message Peers {
    repeated Address peers = 1;
}

message Block {
    message BlockEligibilityClaim {
        VrfProof proof = 1;
    }
    message BlockHeader {
        message BlockMerkleRoots {
            Hash mint_hash = 1;
            Hash vt_hash_merkle_root = 2;
            Hash dr_hash_merkle_root = 3;
            Hash commit_hash_merkle_root = 4;
            Hash reveal_hash_merkle_root = 5;
            Hash tally_hash_merkle_root = 6;
        }
        uint32 version = 1;
        CheckpointBeacon beacon = 2;
        BlockMerkleRoots merkle_roots = 3;
        BlockEligibilityClaim proof = 4;
    }
    message BlockTransactions {
        MintTransaction mint = 1;
        repeated VTTransaction value_transfer_txns = 2;
        repeated DRTransaction data_request_txns = 3;
        repeated CommitTransaction commit_txns = 4;
        repeated RevealTransaction reveal_txns = 5;
        repeated TallyTransaction tally_txns = 6;
    }

    BlockHeader block_header = 1;
    KeyedSignature block_sig = 2;
    BlockTransactions txns = 3;
}

message InventoryAnnouncement {
    repeated InventoryEntry inventory = 1;
}

message InventoryRequest {
    repeated InventoryEntry inventory = 1;
}

message LastBeacon {
    CheckpointBeacon highest_block_checkpoint = 1;
}

message OutputPointer {
    Hash transaction_id = 1;
    uint32 output_index = 2;
}

message ValueTransferOutput {
    PublicKeyHash pkh = 1;
    uint64 value = 2;
    uint64 time_lock = 3;
}

message DataRequestOutput {
    message RADRequest {
        enum RADType {
            HttpGet = 0;
        }
        message RADFilter {
            uint32 op = 1;
            bytes args = 2;
        }
        message RADRetrieve {
            RADType kind = 1;
            string url = 2;
            // TODO: RADScript should maybe be a type?
            bytes script = 3;
        }
        message RADAggregate {
            repeated RADFilter filters = 1;
            uint32 reducer = 2;
        }
        message RADTally {
            repeated RADFilter filters = 1;
            uint32 reducer = 2;
        }

        uint64 time_lock = 1;
        repeated RADRetrieve retrieve = 2;
        RADAggregate aggregate = 3;
        RADTally tally = 4;
    }

    RADRequest data_request = 1;
    uint64 witness_reward = 2;
    uint32 witnesses = 3;
    uint32 backup_witnesses = 4;
    uint64 commit_fee = 5;
    uint64 reveal_fee = 6;
    uint64 tally_fee = 7;
    uint32 extra_commit_rounds = 8;
    uint32 extra_reveal_rounds = 9;
    uint32 min_consensus_percentage = 10;
}

message Input {
    OutputPointer output_pointer = 1;
}

// Transaction types
message VTTransactionBody {
    repeated Input inputs = 1;
    repeated ValueTransferOutput outputs = 2;
}

message VTTransaction {
    VTTransactionBody body = 1;
    repeated KeyedSignature signatures = 2;
}

message DRTransactionBody {
    repeated Input inputs = 1;
    repeated ValueTransferOutput outputs = 2;
    DataRequestOutput dr_output = 3;
}

message DRTransaction {
    DRTransactionBody body = 1;
    repeated KeyedSignature signatures = 2;
}

message CommitTransactionBody {
    // TODO: Discussion about collateral
    // repeated Input collateral = 1;
    Hash dr_pointer = 1;
    Hash commitment = 2;
    DataRequestEligibilityClaim proof = 3;
}

message CommitTransaction {
    CommitTransactionBody body = 1;
    repeated KeyedSignature signatures = 2;
}

message RevealTransactionBody {
    Hash dr_pointer = 1;
    bytes reveal = 2;
    PublicKeyHash pkh = 3;
}

message RevealTransaction {
    RevealTransactionBody body = 1;
    repeated KeyedSignature signatures = 2;
}

message TallyTransaction {
    Hash dr_pointer = 1;
    bytes tally = 2;
    repeated ValueTransferOutput outputs = 3;
    repeated PublicKeyHash rewarded_witnesses = 4;
}

message MintTransaction {
    // The epoch field is used to ensure that each MintTransaction has a unique hash
    fixed32 epoch = 1;
    ValueTransferOutput output = 2;
}

message Transaction {
    oneof kind {
        VTTransaction ValueTransfer = 1;
        DRTransaction DataRequest = 2;
        CommitTransaction Commit = 3;
        RevealTransaction Reveal = 4;
        TallyTransaction Tally = 5;
        MintTransaction Mint = 6;
    }
}

// Helper structures (not meant to be sent directly as messages)
message Hash {
    oneof kind {
        bytes SHA256 = 1;
    }
}

message Secp256k1Signature {
    bytes der = 1;
}

message Signature {
    oneof kind {
        Secp256k1Signature Secp256k1 = 1;
    }
}

message PublicKey {
    bytes public_key = 1;
}

message PublicKeyHash {
    bytes hash = 1;
}

message KeyedSignature {
    Signature signature = 1;
    PublicKey public_key = 2;
}

message Address {
    bytes address = 1;
}

message CheckpointBeacon {
    fixed32 checkpoint = 1;
    Hash hash_prev_block = 2;
}

message InventoryEntry {
    oneof kind {
        Hash Block = 1;
        Hash Tx = 2;
    }
}

message ConsensusConstants {
    int64 checkpoint_zero_timestamp = 1;
    uint32 checkpoints_period = 2;
    Hash bootstrap_hash = 3;
    Hash genesis_hash = 4;
    uint32 max_block_weight = 5;
    uint32 activity_period = 6;
    uint32 reputation_expire_alpha_diff = 7;
    uint32 reputation_issuance = 8;
    uint32 reputation_issuance_stop = 9;
    double reputation_penalization_factor = 10;
    uint32 mining_backup_factor = 11;
    uint32 mining_replication_factor = 12;
}

message VrfProof {
    bytes proof = 1;
    PublicKey public_key = 2;
}

message DataRequestVrfMessage {
    CheckpointBeacon beacon = 1;
    Hash dr_hash = 2;
}

message DataRequestEligibilityClaim {
    VrfProof proof = 1;
}
