// Draft of initial proposal for lightweight connection protocol
// ubyte(8) / ushort(16) / uint(32) / ulong(64)
namespace Protocol;

/////////////////////////////////////////////////////////
// AUXILIARY TYPES
/////////////////////////////////////////////////////////
union IpAddress { Ipv4, Ipv6 }

table Ipv4 {
    ip: uint32;
}

table Ipv6 {
    ip0: uint32;
    ip1: uint32;
    ip2: uint32;
    ip3: uint32;
}

table Address {
    ip: IpAddress;    port: uint16;
}

/////////////////////////////////////////////////////////
// CRYPTO TYPES
/////////////////////////////////////////////////////////
enum HashType: ubyte {
    SHA256,
}

table Hash {
    type: HashType;
    bytes: [ubyte] (required);
}

table Secp256k1Signature {
    r: [ubyte] (required);
    s: [ubyte] (required);
}

union Signature { Secp256k1Signature }

/////////////////////////////////////////////////////////
// MAIN TYPES
/////////////////////////////////////////////////////////
// List of available commands
union Command (required) { Version, Verack, GetPeers, Peers, Ping, Pong, Block, InventoryAnnouncement, InventoryRequest, LastBeacon, Transaction }

// Message format with header
table Message {
    magic: uint16;
    command: Command (required);
}

/////////////////////////////////////////////////////////
// HANDSHAKE MESSAGES
/////////////////////////////////////////////////////////
table Version {
    version: uint32;
    timestamp: int64;
    capabilities: uint64;
    sender_address: Address;
    receiver_address: Address;
    user_agent: string (required);
    last_epoch: uint32;
    genesis: uint64;
    nonce: uint64;
}

table Verack {
}

/////////////////////////////////////////////////////////
// PEER DISCOVERY MESSAGES
/////////////////////////////////////////////////////////
table GetPeers {
}

table Peers {
    peers: [Address];
}

/////////////////////////////////////////////////////////
// HEARTBEAT MESSAGES
/////////////////////////////////////////////////////////
table Ping {
    nonce: uint64;
}

table Pong {
    nonce: uint64;
}

/////////////////////////////////////////////////////////
// INVENTORY MESSAGES
/////////////////////////////////////////////////////////
enum InventoryItemType: uint8 {
    Error = 0,
    Tx,
    Block,
    DataRequest,
    DataResult
}

table InventoryEntry {
    type: InventoryItemType;
    hash: Hash (required);
}

table InventoryAnnouncement {
    inventory: [InventoryEntry] (required);
}

table InventoryRequest {
    inventory: [InventoryEntry] (required);
}

/////////////////////////////////////////////////////////
// BLOCK MESSAGES
/////////////////////////////////////////////////////////
table CheckpointBeacon {
    checkpoint: uint32;
    hash_prev_block: Hash (required);
}

table BlockHeader {
    version: uint32;
    beacon: CheckpointBeacon (required);
    hash_merkle_root: Hash (required);
}

table LeadershipProof {
    block_sig: Signature;
    influence: uint64;
}

table Block {
    block_header: BlockHeader (required);
    proof: LeadershipProof (required);
    txns: [Transaction] (required);
}

/////////////////////////////////////////////////////////
// TRANSACTION MESSAGES
/////////////////////////////////////////////////////////
union InputUnion (required) {CommitInput, RevealInput, DataRequestInput}

table RevealInput {
    transaction_id: [ubyte] (required);
    output_index: uint32;
}

table DataRequestInput {
    transaction_id: [ubyte] (required);
    output_index: uint32;
    poe: [ubyte] (required);
}

table CommitInput {
    transaction_id: [ubyte] (required);
    output_index: uint32;
    reveal: [ubyte] (required);
    nonce: uint64;
}

table Input {
    input: InputUnion (required);
}

union OutputUnion (required) { ValueTransferOutput, DataRequestOutput, CommitOutput, RevealOutput, ConsensusOutput }

table Output {
    output: OutputUnion (required);
}

table ValueTransferOutput {
    pkh: Hash (required);
    value: uint64;
}

table DataRequestOutput {
    data_request: [ubyte] (required);
    value: uint64;
    witnesses: uint8;
    backup_witnesses: uint8;
    commit_fee: uint64;
    reveal_fee: uint64;
    tally_fee: uint64;
    time_lock: uint64;
}

table CommitOutput {
    commitment: Hash (required);
    value: uint64;
}

table RevealOutput {
    reveal: [ubyte] (required);
    pkh: Hash (required);
    value: uint64;
}

table ConsensusOutput {
    result: [ubyte] (required);
    pkh: Hash (required);
    value: uint64;
}

table KeyedSignature {
    signature: Signature (required);
    public_key: [ubyte] (required); 
}

table Transaction {
    version: uint32;
    inputs: [Input] (required);
    outputs: [Output] (required);
    signatures: [KeyedSignature] (required);
}

/////////////////////////////////////////////////////////
// LAST BEACON MESSAGES
/////////////////////////////////////////////////////////
table LastBeacon {
    highest_block_checkpoint: CheckpointBeacon (required);
}

root_type Message;