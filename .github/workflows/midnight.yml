name: Check every midnight

on:
  "push"
  schedule:
    - cron:  '0 0 * * *'

jobs:
  deps_audit:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Cargo dependencies security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  e2e_debug:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Install environment dependencies
        run: |
          sudo add-apt-repository -y ppa:maarten-fonville/protobuf
          sudo apt-get update -y -qq
          sudo apt-get install -y g++-5 cmake libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev protobuf-compiler librocksdb-dev
          just || curl -LSfs https://japaric.github.io/trust/install.sh | sh -s -- --git casey/just --target x86_64-unknown-linux-musl --to ~/.cargo/bin

      - name: Load persistent storage
        run: |
          curl https://github.com/witnet/witnet-rust/releases/download/0.5.0-rc1/witnet-rust-testnet-5-tests-storage.tar.gz --output ./storage.tar.gz
          tar -zxf ./storage.tar.gz
          cp -r /witnet/.witnet-rust-testnet-5 .

      - name: Run debug E2E test
        run: just e2e-debug

  nightly_release:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Install environment dependencies
        run: |
          sudo add-apt-repository -y ppa:maarten-fonville/protobuf
          sudo apt-get update -y -qq
          sudo apt-get install -y g++-5 cmake libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev protobuf-compiler librocksdb-dev
          just || curl -LSfs https://japaric.github.io/trust/install.sh | sh -s -- --git casey/just --target x86_64-unknown-linux-musl --to ~/.cargo/bin

      - name: Build with --release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Publish release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ github.sha }}
          release_name: Nightly ${{ github.sha }}
          draft: false
          prerelease: true

      - name: Create a compressed bundle
        run: |
          mkdir witnet-x86_64-unknown-linux-gnu
          cp ./witnet.toml ./witnet-x86_64-unknown-linux-gnu/
          cp ./target/release/witnet ./witnet-x86_64-unknown-linux-gnu/
          tar -zcvf witnet-x86_64-unknown-linux-gnu.tar.gz witnet-x86_64-unknown-linux-gnu

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: witnet-x86_64-unknown-linux-gnu.tar.gz
          asset_name: witnet-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/tar+gzip
